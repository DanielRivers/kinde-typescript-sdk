/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRoleRequest,
  ErrorResponse,
  GetRolesResponse,
  SuccessResponse,
  UpdateRolePermissionsRequest,
  UpdateRolePermissionsResponse,
  UpdateRolesRequest,
} from '../models/index';
import {
    CreateRoleRequestFromJSON,
    CreateRoleRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetRolesResponseFromJSON,
    GetRolesResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateRolePermissionsRequestFromJSON,
    UpdateRolePermissionsRequestToJSON,
    UpdateRolePermissionsResponseFromJSON,
    UpdateRolePermissionsResponseToJSON,
    UpdateRolesRequestFromJSON,
    UpdateRolesRequestToJSON,
} from '../models/index';

export interface CreateRoleOperationRequest {
    createRoleRequest?: CreateRoleRequest;
}

export interface GetRolesRequest {
    sort?: GetRolesSortEnum;
    pageSize?: number | null;
    nextToken?: string | null;
}

export interface UpdateRolePermissionsOperationRequest {
    roleId: string;
    updateRolePermissionsRequest: UpdateRolePermissionsRequest;
}

export interface UpdateRolesOperationRequest {
    roleId: string;
    updateRolesRequest?: UpdateRolesRequest;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * Create role.
     * Create Role
     */
    async createRoleRaw(requestParameters: CreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoleRequestToJSON(requestParameters.createRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Create role.
     * Create Role
     */
    async createRole(requestParameters: CreateRoleOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The returned list can be sorted by role name or role ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter. 
     * List Roles
     */
    async getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRolesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRolesResponseFromJSON(jsonValue));
    }

    /**
     * The returned list can be sorted by role name or role ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter. 
     * List Roles
     */
    async getRoles(requestParameters: GetRolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRolesResponse> {
        const response = await this.getRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update role permissions. 
     * Update Role Permissions
     */
    async updateRolePermissionsRaw(requestParameters: UpdateRolePermissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRolePermissionsResponse>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling updateRolePermissions.');
        }

        if (requestParameters.updateRolePermissionsRequest === null || requestParameters.updateRolePermissionsRequest === undefined) {
            throw new runtime.RequiredError('updateRolePermissionsRequest','Required parameter requestParameters.updateRolePermissionsRequest was null or undefined when calling updateRolePermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/roles/{role_id}/permissions`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRolePermissionsRequestToJSON(requestParameters.updateRolePermissionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRolePermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Update role permissions. 
     * Update Role Permissions
     */
    async updateRolePermissions(requestParameters: UpdateRolePermissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRolePermissionsResponse> {
        const response = await this.updateRolePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a role
     * Update Role
     */
    async updateRolesRaw(requestParameters: UpdateRolesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling updateRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRolesRequestToJSON(requestParameters.updateRolesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update a role
     * Update Role
     */
    async updateRoles(requestParameters: UpdateRolesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetRolesSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    IdAsc: 'id_asc',
    IdDesc: 'id_desc'
} as const;
export type GetRolesSortEnum = typeof GetRolesSortEnum[keyof typeof GetRolesSortEnum];
