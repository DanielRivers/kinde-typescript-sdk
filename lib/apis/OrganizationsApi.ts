/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddOrganizationUsersRequest,
  AddOrganizationUsersResponse,
  CreateOrganizationRequest,
  CreateOrganizationResponse,
  ErrorResponse,
  GetOrganizationsResponse,
  GetOrganizationsUsersResponse,
  Organization,
  RemoveOrganizationUsersResponse,
  SuccessResponse,
  UpdateOrganizationRequest,
  UpdateOrganizationUsersRequest,
} from '../models';
import {
    AddOrganizationUsersRequestFromJSON,
    AddOrganizationUsersRequestToJSON,
    AddOrganizationUsersResponseFromJSON,
    AddOrganizationUsersResponseToJSON,
    CreateOrganizationRequestFromJSON,
    CreateOrganizationRequestToJSON,
    CreateOrganizationResponseFromJSON,
    CreateOrganizationResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetOrganizationsResponseFromJSON,
    GetOrganizationsResponseToJSON,
    GetOrganizationsUsersResponseFromJSON,
    GetOrganizationsUsersResponseToJSON,
    OrganizationFromJSON,
    OrganizationToJSON,
    RemoveOrganizationUsersResponseFromJSON,
    RemoveOrganizationUsersResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateOrganizationRequestFromJSON,
    UpdateOrganizationRequestToJSON,
    UpdateOrganizationUsersRequestFromJSON,
    UpdateOrganizationUsersRequestToJSON,
} from '../models';

export interface AddOrganizationUsersOperationRequest {
    orgCode: string;
    addOrganizationUsersRequest?: AddOrganizationUsersRequest;
}

export interface CreateOrganizationOperationRequest {
    createOrganizationRequest?: CreateOrganizationRequest;
}

export interface DeleteOrganizationFeatureFlagOverrideRequest {
    orgCode: string;
    featureFlagKey: string;
}

export interface DeleteOrganizationFeatureFlagOverridesRequest {
    orgCode: string;
}

export interface GetOrganizationRequest {
    code?: string;
}

export interface GetOrganizationUsersRequest {
    orgCode: string;
    sort?: GetOrganizationUsersSortEnum;
    pageSize?: number | null;
    nextToken?: string | null;
    permissions?: string;
}

export interface GetOrganizationsRequest {
    sort?: GetOrganizationsSortEnum;
    pageSize?: number | null;
    nextToken?: string | null;
}

export interface RemoveOrganizationUserRequest {
    orgCode: string;
    userId: string;
}

export interface UpdateOrganizationOperationRequest {
    orgCode: string;
    updateOrganizationRequest?: UpdateOrganizationRequest;
}

export interface UpdateOrganizationFeatureFlagOverrideRequest {
    orgCode: string;
    featureFlagKey: string;
    value: string;
}

export interface UpdateOrganizationUsersOperationRequest {
    orgCode: string;
    updateOrganizationUsersRequest?: UpdateOrganizationUsersRequest;
}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI {

    /**
     * Add existing users to an organization.
     * Add organization users
     */
    async addOrganizationUsersRaw(requestParameters: AddOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOrganizationUsersResponse>> {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode','Required parameter requestParameters.orgCode was null or undefined when calling addOrganizationUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOrganizationUsersRequestToJSON(requestParameters.addOrganizationUsersRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOrganizationUsersResponseFromJSON(jsonValue));
    }

    /**
     * Add existing users to an organization.
     * Add organization users
     */
    async addOrganizationUsers(requestParameters: AddOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOrganizationUsersResponse> {
        const response = await this.addOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an organization.
     * Create Organization
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrganizationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationRequestToJSON(requestParameters.createOrganizationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrganizationResponseFromJSON(jsonValue));
    }

    /**
     * Create an organization.
     * Create Organization
     */
    async createOrganization(requestParameters: CreateOrganizationOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrganizationResponse> {
        const response = await this.createOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete organization feature flag override.
     * Delete organization feature flag override
     */
    async deleteOrganizationFeatureFlagOverrideRaw(requestParameters: DeleteOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode','Required parameter requestParameters.orgCode was null or undefined when calling deleteOrganizationFeatureFlagOverride.');
        }

        if (requestParameters.featureFlagKey === null || requestParameters.featureFlagKey === undefined) {
            throw new runtime.RequiredError('featureFlagKey','Required parameter requestParameters.featureFlagKey was null or undefined when calling deleteOrganizationFeatureFlagOverride.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters.featureFlagKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete organization feature flag override.
     * Delete organization feature flag override
     */
    async deleteOrganizationFeatureFlagOverride(requestParameters: DeleteOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteOrganizationFeatureFlagOverrideRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete all organization feature flag overrides.
     * Delete all organization feature flag overrides
     */
    async deleteOrganizationFeatureFlagOverridesRaw(requestParameters: DeleteOrganizationFeatureFlagOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode','Required parameter requestParameters.orgCode was null or undefined when calling deleteOrganizationFeatureFlagOverrides.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete all organization feature flag overrides.
     * Delete all organization feature flag overrides
     */
    async deleteOrganizationFeatureFlagOverrides(requestParameters: DeleteOrganizationFeatureFlagOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteOrganizationFeatureFlagOverridesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an organization given the organization\'s code. 
     * Get Organization
     */
    async getOrganizationRaw(requestParameters: GetOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organization>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     * Gets an organization given the organization\'s code. 
     * Get Organization
     */
    async getOrganization(requestParameters: GetOrganizationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organization> {
        const response = await this.getOrganizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get users in an organization.
     * List Organization Users
     */
    async getOrganizationUsersRaw(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsUsersResponse>> {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode','Required parameter requestParameters.orgCode was null or undefined when calling getOrganizationUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }

        if (requestParameters.permissions !== undefined) {
            queryParameters['permissions'] = requestParameters.permissions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationsUsersResponseFromJSON(jsonValue));
    }

    /**
     * Get users in an organization.
     * List Organization Users
     */
    async getOrganizationUsers(requestParameters: GetOrganizationUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsUsersResponse> {
        const response = await this.getOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of organizations. 
     * List Organizations
     */
    async getOrganizationsRaw(requestParameters: GetOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrganizationsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['next_token'] = requestParameters.nextToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrganizationsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of organizations. 
     * List Organizations
     */
    async getOrganizations(requestParameters: GetOrganizationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrganizationsResponse> {
        const response = await this.getOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove user from an organization.
     * Remove organization user
     */
    async removeOrganizationUserRaw(requestParameters: RemoveOrganizationUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode','Required parameter requestParameters.orgCode was null or undefined when calling removeOrganizationUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeOrganizationUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users/{user_id}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove user from an organization.
     * Remove organization user
     */
    async removeOrganizationUser(requestParameters: RemoveOrganizationUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.removeOrganizationUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an organization.
     * Update Organization
     */
    async updateOrganizationRaw(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode','Required parameter requestParameters.orgCode was null or undefined when calling updateOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationRequestToJSON(requestParameters.updateOrganizationRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an organization.
     * Update Organization
     */
    async updateOrganization(requestParameters: UpdateOrganizationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     * Update organization feature flag override.
     * Update organization feature flag override
     */
    async updateOrganizationFeatureFlagOverrideRaw(requestParameters: UpdateOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode','Required parameter requestParameters.orgCode was null or undefined when calling updateOrganizationFeatureFlagOverride.');
        }

        if (requestParameters.featureFlagKey === null || requestParameters.featureFlagKey === undefined) {
            throw new runtime.RequiredError('featureFlagKey','Required parameter requestParameters.featureFlagKey was null or undefined when calling updateOrganizationFeatureFlagOverride.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling updateOrganizationFeatureFlagOverride.');
        }

        const queryParameters: any = {};

        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))).replace(`{${"feature_flag_key"}}`, encodeURIComponent(String(requestParameters.featureFlagKey))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update organization feature flag override.
     * Update organization feature flag override
     */
    async updateOrganizationFeatureFlagOverride(requestParameters: UpdateOrganizationFeatureFlagOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.updateOrganizationFeatureFlagOverrideRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update users that belong to an organization.
     * Update organization users
     */
    async updateOrganizationUsersRaw(requestParameters: UpdateOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveOrganizationUsersResponse>> {
        if (requestParameters.orgCode === null || requestParameters.orgCode === undefined) {
            throw new runtime.RequiredError('orgCode','Required parameter requestParameters.orgCode was null or undefined when calling updateOrganizationUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/organizations/{org_code}/users`.replace(`{${"org_code"}}`, encodeURIComponent(String(requestParameters.orgCode))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationUsersRequestToJSON(requestParameters.updateOrganizationUsersRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveOrganizationUsersResponseFromJSON(jsonValue));
    }

    /**
     * Update users that belong to an organization.
     * Update organization users
     */
    async updateOrganizationUsers(requestParameters: UpdateOrganizationUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveOrganizationUsersResponse> {
        const response = await this.updateOrganizationUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetOrganizationUsersSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    EmailAsc: 'email_asc',
    EmailDesc: 'email_desc'
} as const;
export type GetOrganizationUsersSortEnum = typeof GetOrganizationUsersSortEnum[keyof typeof GetOrganizationUsersSortEnum];
/**
 * @export
 */
export const GetOrganizationsSortEnum = {
    NameAsc: 'name_asc',
    NameDesc: 'name_desc',
    EmailAsc: 'email_asc',
    EmailDesc: 'email_desc'
} as const;
export type GetOrganizationsSortEnum = typeof GetOrganizationsSortEnum[keyof typeof GetOrganizationsSortEnum];
