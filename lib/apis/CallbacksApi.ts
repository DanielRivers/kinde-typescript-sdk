/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetRedirectCallbackUrlsResponse,
} from '../models';
import {
    GetRedirectCallbackUrlsResponseFromJSON,
    GetRedirectCallbackUrlsResponseToJSON,
} from '../models';

export interface AddRedirectCallbackURLsRequest {
    appId: string;
    urls: Array<string>;
}

export interface GetCallbackURLsRequest {
    appId: string;
}

export interface ReplaceRedirectCallbackURLsRequest {
    appId: string;
    urls: Array<string>;
}

/**
 * 
 */
export class CallbacksApi extends runtime.BaseAPI {

    /**
     * Add additional redirect callback URLs. 
     * Add Redirect Callback URLs
     */
    async addRedirectCallbackURLsRaw(requestParameters: AddRedirectCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling addRedirectCallbackURLs.');
        }

        if (requestParameters.urls === null || requestParameters.urls === undefined) {
            throw new runtime.RequiredError('urls','Required parameter requestParameters.urls was null or undefined when calling addRedirectCallbackURLs.');
        }

        const queryParameters: any = {};

        if (requestParameters.urls) {
            queryParameters['urls'] = requestParameters.urls;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add additional redirect callback URLs. 
     * Add Redirect Callback URLs
     */
    async addRedirectCallbackURLs(requestParameters: AddRedirectCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addRedirectCallbackURLsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns an application\'s redirect callback URLs. 
     * List Callback URLs
     */
    async getCallbackURLsRaw(requestParameters: GetCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRedirectCallbackUrlsResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getCallbackURLs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRedirectCallbackUrlsResponseFromJSON(jsonValue));
    }

    /**
     * Returns an application\'s redirect callback URLs. 
     * List Callback URLs
     */
    async getCallbackURLs(requestParameters: GetCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRedirectCallbackUrlsResponse> {
        const response = await this.getCallbackURLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace all redirect callback URLs. 
     * Replace redirect callback URLs
     */
    async replaceRedirectCallbackURLsRaw(requestParameters: ReplaceRedirectCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling replaceRedirectCallbackURLs.');
        }

        if (requestParameters.urls === null || requestParameters.urls === undefined) {
            throw new runtime.RequiredError('urls','Required parameter requestParameters.urls was null or undefined when calling replaceRedirectCallbackURLs.');
        }

        const queryParameters: any = {};

        if (requestParameters.urls) {
            queryParameters['urls'] = requestParameters.urls;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("kindeBearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/applications/{app_id}/auth_redirect_urls`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replace all redirect callback URLs. 
     * Replace redirect callback URLs
     */
    async replaceRedirectCallbackURLs(requestParameters: ReplaceRedirectCallbackURLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.replaceRedirectCallbackURLsRaw(requestParameters, initOverrides);
    }

}
