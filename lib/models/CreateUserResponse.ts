/* tslint:disable */
/* eslint-disable */
/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
import type { UserIdentity } from './UserIdentity.js';
import {
    UserIdentityFromJSON,
    UserIdentityFromJSONTyped,
    UserIdentityToJSON,
} from './UserIdentity.js';

/**
 * 
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     * Unique id of the user in Kinde.
     * @type {string}
     * @memberof CreateUserResponse
     */
    id?: string;
    /**
     * True if the user was successfully created.
     * @type {boolean}
     * @memberof CreateUserResponse
     */
    created?: boolean;
    /**
     * 
     * @type {Array<UserIdentity>}
     * @memberof CreateUserResponse
     */
    identities?: Array<UserIdentity>;
}

/**
 * Check if a given object implements the CreateUserResponse interface.
 */
export function instanceOfCreateUserResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreateUserResponseFromJSON(json: any): CreateUserResponse {
    return CreateUserResponseFromJSONTyped(json, false);
}

export function CreateUserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateUserResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'created': !exists(json, 'created') ? undefined : json['created'],
        'identities': !exists(json, 'identities') ? undefined : ((json['identities'] as Array<any>).map(UserIdentityFromJSON)),
    };
}

export function CreateUserResponseToJSON(value?: CreateUserResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created': value.created,
        'identities': value.identities === undefined ? undefined : ((value.identities as Array<any>).map(UserIdentityToJSON)),
    };
}

